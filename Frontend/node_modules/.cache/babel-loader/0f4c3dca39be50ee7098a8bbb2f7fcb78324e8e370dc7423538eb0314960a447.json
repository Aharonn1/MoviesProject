{"ast":null,"code":"import { AuthActionType, authStore } from \"../Redux/AuthRedux\";\nimport axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nclass AuthService {\n  async register(user) {\n    const response = await axios.post(appConfig.registerUrl, user);\n    const token = response.data;\n    authStore.dispatch({\n      type: AuthActionType.Register,\n      payload: token\n    });\n  }\n  async login(credentials) {\n    const response = await axios.post(appConfig.loginUrl, credentials);\n    const token = response.data;\n    authStore.dispatch({\n      type: AuthActionType.Login,\n      payload: token\n    });\n  }\n  logout() {\n    authStore.dispatch({\n      type: AuthActionType.Logout\n    });\n  }\n  isLoggedIn() {\n    return authStore.getState().token !== null;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["AuthActionType","authStore","axios","appConfig","AuthService","register","user","response","post","registerUrl","token","data","dispatch","type","Register","payload","login","credentials","loginUrl","Login","logout","Logout","isLoggedIn","getState","authService"],"sources":["C:/Users/User/Desktop/javascript/movies project 6/Frontend/src/Services/auth-service.ts"],"sourcesContent":["import { AuthActionType, authStore } from \"../Redux/AuthRedux\";\r\nimport CredentialsModel from \"../Models/credential-model\";\r\nimport UserModel from \"../Models/user-model\";\r\nimport axios from \"axios\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\n\r\nclass AuthService {\r\n\r\n    async register(user: UserModel): Promise<void> {\r\n        const response = await axios.post<string>(appConfig.registerUrl, user);\r\n        const token = response.data;\r\n        authStore.dispatch({ type: AuthActionType.Register, payload: token });\r\n    }\r\n\r\n    async login(credentials: CredentialsModel): Promise<void> {\r\n        const response = await axios.post<string>(appConfig.loginUrl, credentials);\r\n        const token = response.data;\r\n        authStore.dispatch({ type: AuthActionType.Login, payload: token });\r\n    }\r\n\r\n    logout(): void {\r\n        authStore.dispatch({ type: AuthActionType.Logout });\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return authStore.getState().token !== null;\r\n    }\r\n}\r\n\r\nconst authService = new AuthService();\r\nexport default authService;"],"mappings":"AAAA,SAASA,cAAc,EAAEC,SAAS,QAAQ,oBAAoB;AAG9D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,oBAAoB;AAE1C,MAAMC,WAAW,CAAC;EAEd,MAAMC,QAAQA,CAACC,IAAe,EAAiB;IAC3C,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAASL,SAAS,CAACM,WAAW,EAAEH,IAAI,CAAC;IACtE,MAAMI,KAAK,GAAGH,QAAQ,CAACI,IAAI;IAC3BV,SAAS,CAACW,QAAQ,CAAC;MAAEC,IAAI,EAAEb,cAAc,CAACc,QAAQ;MAAEC,OAAO,EAAEL;IAAM,CAAC,CAAC;EACzE;EAEA,MAAMM,KAAKA,CAACC,WAA6B,EAAiB;IACtD,MAAMV,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAASL,SAAS,CAACe,QAAQ,EAAED,WAAW,CAAC;IAC1E,MAAMP,KAAK,GAAGH,QAAQ,CAACI,IAAI;IAC3BV,SAAS,CAACW,QAAQ,CAAC;MAAEC,IAAI,EAAEb,cAAc,CAACmB,KAAK;MAAEJ,OAAO,EAAEL;IAAM,CAAC,CAAC;EACtE;EAEAU,MAAMA,CAAA,EAAS;IACXnB,SAAS,CAACW,QAAQ,CAAC;MAAEC,IAAI,EAAEb,cAAc,CAACqB;IAAO,CAAC,CAAC;EACvD;EAEAC,UAAUA,CAAA,EAAY;IAClB,OAAOrB,SAAS,CAACsB,QAAQ,CAAC,CAAC,CAACb,KAAK,KAAK,IAAI;EAC9C;AACJ;AAEA,MAAMc,WAAW,GAAG,IAAIpB,WAAW,CAAC,CAAC;AACrC,eAAeoB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}