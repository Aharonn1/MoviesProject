{"ast":null,"code":"import { createStore } from \"redux\";\nexport class MovieState {\n  constructor() {\n    this.movie = [];\n  }\n}\nexport let MovieActionType;\n(function (MovieActionType) {\n  MovieActionType[\"getAllMovies\"] = \"getAllMovies\";\n  MovieActionType[\"getMovieByTheater\"] = \"getMovieByTheater\";\n  MovieActionType[\"addMovie\"] = \"addMovie\";\n  MovieActionType[\"deleteMovie\"] = \"deleteMovie\";\n  MovieActionType[\"Like\"] = \"Like\";\n  MovieActionType[MovieActionType[\"addLike\"] = unLike = \"unLike\"] = \"addLike\";\n})(MovieActionType || (MovieActionType = {}));\nexport function movieReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new MovieState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case MovieActionType.getAllMovies:\n      newState.movie = action.payload;\n      break;\n    case MovieActionType.addMovie:\n      newState.movie.push(action.payload);\n      break;\n    case MovieActionType.deleteMovie:\n      const indexToDelete = newState.movie.findIndex(p => p.movieId === action.payload);\n      if (indexToDelete >= 0) {\n        newState.movie.splice(indexToDelete, 1);\n      }\n      break;\n    case MovieActionType.Like:\n      const isNotLikeToUpdate = newState.movie.find(m => m.like === action.payload);\n      if (isNotLikeToUpdate.like === 0) {\n        isNotLikeToUpdate.like = 1;\n      }\n      break;\n    case VacationActionType.AddFollow:\n      let indexToAddFollow = newState.vacation.findIndex(v => v.vacationId === action.payload);\n      if (indexToAddFollow >= 0) {\n        newState.vacation[indexToAddFollow].followersCount += 1;\n        indexToAddFollow - 1;\n      }\n      break;\n  }\n  return newState;\n}\nexport const movieStore = createStore(movieReducer);","map":{"version":3,"names":["createStore","MovieState","movie","MovieActionType","unLike","movieReducer","currentState","action","newState","type","getAllMovies","payload","addMovie","push","deleteMovie","indexToDelete","findIndex","p","movieId","splice","Like","isNotLikeToUpdate","find","m","like","VacationActionType","AddFollow","indexToAddFollow","vacation","v","vacationId","followersCount","movieStore"],"sources":["C:/Users/User/Desktop/javascript/tirgulhomeday9/Frontend/src/Redux/MovieRedux.ts"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport MoviesModel from \"../Models/movies-model\";\r\n\r\nexport class MovieState{\r\n    public movie: MoviesModel[] = [];\r\n}\r\n\r\nexport enum MovieActionType{\r\n    getAllMovies = \"getAllMovies\",\r\n    getMovieByTheater = \"getMovieByTheater\",\r\n    addMovie = \"addMovie\",\r\n    deleteMovie = \"deleteMovie\",\r\n    Like = \"Like\",\r\n    addLike = \r\n    unLike = \"unLike\"\r\n}\r\n\r\nexport interface MovieAction {\r\n    type: MovieActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function movieReducer(currentState = new MovieState(), action: MovieAction): MovieState {\r\n    const newState = { ...currentState }\r\n\r\n    switch (action.type) {\r\n        case MovieActionType.getAllMovies:\r\n            newState.movie = action.payload\r\n            break;\r\n\r\n        case MovieActionType.addMovie:\r\n            newState.movie.push(action.payload)\r\n\r\n            break;\r\n\r\n        case MovieActionType.deleteMovie:\r\n            const indexToDelete = newState.movie.findIndex(p => p.movieId === action.payload)\r\n            if (indexToDelete >= 0) {\r\n                newState.movie.splice(indexToDelete, 1)\r\n            }\r\n            break;\r\n           \r\n            case MovieActionType.Like:\r\n                const isNotLikeToUpdate = newState.movie.find(m => m.like === action.payload)\r\n                if (isNotLikeToUpdate.like === 0) {\r\n                    isNotLikeToUpdate.like = 1;\r\n                }\r\n                break;\r\n\r\n                case VacationActionType.AddFollow:\r\n                    let indexToAddFollow = newState.vacation.findIndex(v => v.vacationId === action.payload) \r\n                    if(indexToAddFollow >= 0){\r\n                        newState.vacation[indexToAddFollow].followersCount += 1;\r\n                        indexToAddFollow -1;\r\n                    }\r\n                    break;\r\n        }\r\n\r\n        \r\n        \r\n        return newState\r\n    }\r\n\r\n\r\n    export const movieStore = createStore(movieReducer);"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAGnC,OAAO,MAAMC,UAAU;EAAA;IAAA,KACZC,KAAK,GAAkB,EAAE;EAAA;AACpC;AAEA,WAAYC,eAAe;AAQ1B,WARWA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe,cAOvBC,MAAM,GAAG,QAAQ;AAAA,GAPTD,eAAe,KAAfA,eAAe;AAe3B,OAAO,SAASE,YAAY,GAAmE;EAAA,IAAlEC,YAAY,uEAAG,IAAIL,UAAU,EAAE;EAAA,IAAEM,MAAmB;EAC7E,MAAMC,QAAQ,GAAG;IAAE,GAAGF;EAAa,CAAC;EAEpC,QAAQC,MAAM,CAACE,IAAI;IACf,KAAKN,eAAe,CAACO,YAAY;MAC7BF,QAAQ,CAACN,KAAK,GAAGK,MAAM,CAACI,OAAO;MAC/B;IAEJ,KAAKR,eAAe,CAACS,QAAQ;MACzBJ,QAAQ,CAACN,KAAK,CAACW,IAAI,CAACN,MAAM,CAACI,OAAO,CAAC;MAEnC;IAEJ,KAAKR,eAAe,CAACW,WAAW;MAC5B,MAAMC,aAAa,GAAGP,QAAQ,CAACN,KAAK,CAACc,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAKX,MAAM,CAACI,OAAO,CAAC;MACjF,IAAII,aAAa,IAAI,CAAC,EAAE;QACpBP,QAAQ,CAACN,KAAK,CAACiB,MAAM,CAACJ,aAAa,EAAE,CAAC,CAAC;MAC3C;MACA;IAEA,KAAKZ,eAAe,CAACiB,IAAI;MACrB,MAAMC,iBAAiB,GAAGb,QAAQ,CAACN,KAAK,CAACoB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKjB,MAAM,CAACI,OAAO,CAAC;MAC7E,IAAIU,iBAAiB,CAACG,IAAI,KAAK,CAAC,EAAE;QAC9BH,iBAAiB,CAACG,IAAI,GAAG,CAAC;MAC9B;MACA;IAEA,KAAKC,kBAAkB,CAACC,SAAS;MAC7B,IAAIC,gBAAgB,GAAGnB,QAAQ,CAACoB,QAAQ,CAACZ,SAAS,CAACa,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKvB,MAAM,CAACI,OAAO,CAAC;MACxF,IAAGgB,gBAAgB,IAAI,CAAC,EAAC;QACrBnB,QAAQ,CAACoB,QAAQ,CAACD,gBAAgB,CAAC,CAACI,cAAc,IAAI,CAAC;QACvDJ,gBAAgB,GAAE,CAAC;MACvB;MACA;EAAM;EAKlB,OAAOnB,QAAQ;AACnB;AAGA,OAAO,MAAMwB,UAAU,GAAGhC,WAAW,CAACK,YAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}