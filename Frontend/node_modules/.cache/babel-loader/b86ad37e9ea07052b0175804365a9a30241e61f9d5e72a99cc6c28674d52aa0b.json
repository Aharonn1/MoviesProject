{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nimport { MovieActionType, movieStore } from \"../Redux/MovieRedux\";\nimport { TheaterActionType, theaterStore } from \"../Redux/TheaterModel\";\nclass MoviesService {\n  async getAllTheaters() {\n    let theater = theaterStore.getState().theater;\n    if (theater.length === 0) {\n      const response = await axios.get(appConfig.theatersUrl);\n      theater = response.data;\n      console.log(theater);\n      theaterStore.dispatch({\n        type: TheaterActionType.getAllTheaters,\n        payload: theater\n      });\n    }\n    return theater;\n  }\n  async getMovieByTheater(theaterId) {\n    let theaters = movieStore.getState().movie;\n    let theater = theaters.find(t => t.theaterId === theaterId);\n    if (!theater) {\n      const response = await axios.get(appConfig.moviesByTheaterUrl + theaterId);\n      theaters = response.data;\n      console.log(theaters);\n    }\n    return theaters;\n  }\n  async addMovie(movie) {\n    const headers = {\n      \"Content-Type\": \"multipart/form-data\"\n    };\n    const response = await axios.post(appConfig.moviesUrl, movie, {\n      headers\n    });\n    const newMovie = response.data;\n    console.log(newMovie);\n    movieStore.dispatch({\n      type: MovieActionType.addMovie,\n      payload: newMovie\n    });\n    return newMovie;\n  }\n  async deleteMovie(movieId) {\n    await axios.delete(appConfig.moviesUrl + movieId);\n    movieStore.dispatch({\n      type: MovieActionType.deleteMovie,\n      payload: movieId\n    });\n  }\n}\nconst moviesService = new MoviesService();\nexport default moviesService;","map":{"version":3,"names":["axios","appConfig","MovieActionType","movieStore","TheaterActionType","theaterStore","MoviesService","getAllTheaters","theater","getState","length","response","get","theatersUrl","data","console","log","dispatch","type","payload","getMovieByTheater","theaterId","theaters","movie","find","t","moviesByTheaterUrl","addMovie","headers","post","moviesUrl","newMovie","deleteMovie","movieId","delete","moviesService"],"sources":["C:/Users/User/Desktop/javascript/tirgulhomeday9/Frontend/src/Services/movies-service.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport TheatersModel from \"../Models/theatersId-model\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport MoviesModel from \"../Models/movies-model\";\r\nimport { MovieActionType, movieStore } from \"../Redux/MovieRedux\";\r\nimport { TheaterActionType, theaterStore } from \"../Redux/TheaterModel\";\r\n\r\nclass MoviesService{\r\n\r\n    public async getAllTheaters():Promise<TheatersModel[]>{\r\n        let theater = theaterStore.getState().theater\r\n        if(theater.length === 0){\r\n            const response = await axios.get<TheatersModel[]>(appConfig.theatersUrl)\r\n            theater = response.data;\r\n            console.log(theater)\r\n            theaterStore.dispatch({ type: TheaterActionType.getAllTheaters, payload: theater })\r\n        }\r\n        return theater\r\n    }\r\n\r\n    public async getMovieByTheater(theaterId:number):Promise<MoviesModel[]>{\r\n        let theaters = movieStore.getState().movie\r\n        let theater = theaters.find(t => t.theaterId === theaterId)  \r\n        if(!theater){\r\n            const response = await axios.get<MoviesModel[]>(appConfig.moviesByTheaterUrl + theaterId);\r\n            theaters = response.data;\r\n            console.log(theaters)\r\n        }\r\n        return theaters;\r\n    }\r\n\r\n    public async addMovie(movie:MoviesModel):Promise<void>{\r\n        const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n        const response = await axios.post<MoviesModel>(appConfig.moviesUrl, movie ,{headers});\r\n        const newMovie = response.data;\r\n        console.log(newMovie)\r\n        movieStore.dispatch({type:MovieActionType.addMovie, payload: newMovie})\r\n        return newMovie\r\n    }\r\n\r\n    public async deleteMovie(movieId:number):Promise<void>{\r\n        await axios.delete<MoviesModel>(appConfig.moviesUrl + movieId)\r\n        movieStore.dispatch({type:MovieActionType.deleteMovie, payload: movieId})\r\n    }\r\n\r\n}\r\n\r\nconst moviesService = new MoviesService();\r\nexport default moviesService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,SAAS,MAAM,oBAAoB;AAE1C,SAASC,eAAe,EAAEC,UAAU,QAAQ,qBAAqB;AACjE,SAASC,iBAAiB,EAAEC,YAAY,QAAQ,uBAAuB;AAEvE,MAAMC,aAAa;EAEf,MAAaC,cAAc,GAA2B;IAClD,IAAIC,OAAO,GAAGH,YAAY,CAACI,QAAQ,EAAE,CAACD,OAAO;IAC7C,IAAGA,OAAO,CAACE,MAAM,KAAK,CAAC,EAAC;MACpB,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAkBX,SAAS,CAACY,WAAW,CAAC;MACxEL,OAAO,GAAGG,QAAQ,CAACG,IAAI;MACvBC,OAAO,CAACC,GAAG,CAACR,OAAO,CAAC;MACpBH,YAAY,CAACY,QAAQ,CAAC;QAAEC,IAAI,EAAEd,iBAAiB,CAACG,cAAc;QAAEY,OAAO,EAAEX;MAAQ,CAAC,CAAC;IACvF;IACA,OAAOA,OAAO;EAClB;EAEA,MAAaY,iBAAiB,CAACC,SAAgB,EAAwB;IACnE,IAAIC,QAAQ,GAAGnB,UAAU,CAACM,QAAQ,EAAE,CAACc,KAAK;IAC1C,IAAIf,OAAO,GAAGc,QAAQ,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACJ,SAAS,KAAKA,SAAS,CAAC;IAC3D,IAAG,CAACb,OAAO,EAAC;MACR,MAAMG,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAgBX,SAAS,CAACyB,kBAAkB,GAAGL,SAAS,CAAC;MACzFC,QAAQ,GAAGX,QAAQ,CAACG,IAAI;MACxBC,OAAO,CAACC,GAAG,CAACM,QAAQ,CAAC;IACzB;IACA,OAAOA,QAAQ;EACnB;EAEA,MAAaK,QAAQ,CAACJ,KAAiB,EAAe;IAClD,MAAMK,OAAO,GAAG;MAAE,cAAc,EAAE;IAAsB,CAAC;IACzD,MAAMjB,QAAQ,GAAG,MAAMX,KAAK,CAAC6B,IAAI,CAAc5B,SAAS,CAAC6B,SAAS,EAAEP,KAAK,EAAE;MAACK;IAAO,CAAC,CAAC;IACrF,MAAMG,QAAQ,GAAGpB,QAAQ,CAACG,IAAI;IAC9BC,OAAO,CAACC,GAAG,CAACe,QAAQ,CAAC;IACrB5B,UAAU,CAACc,QAAQ,CAAC;MAACC,IAAI,EAAChB,eAAe,CAACyB,QAAQ;MAAER,OAAO,EAAEY;IAAQ,CAAC,CAAC;IACvE,OAAOA,QAAQ;EACnB;EAEA,MAAaC,WAAW,CAACC,OAAc,EAAe;IAClD,MAAMjC,KAAK,CAACkC,MAAM,CAAcjC,SAAS,CAAC6B,SAAS,GAAGG,OAAO,CAAC;IAC9D9B,UAAU,CAACc,QAAQ,CAAC;MAACC,IAAI,EAAChB,eAAe,CAAC8B,WAAW;MAAEb,OAAO,EAAEc;IAAO,CAAC,CAAC;EAC7E;AAEJ;AAEA,MAAME,aAAa,GAAG,IAAI7B,aAAa,EAAE;AACzC,eAAe6B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}