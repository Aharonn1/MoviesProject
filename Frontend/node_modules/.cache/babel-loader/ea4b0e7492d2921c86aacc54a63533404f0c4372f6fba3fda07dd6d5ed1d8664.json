{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport { createStore } from \"redux\";\n// 1. Global State\nexport class AuthState {\n  // Load back the token from storage if exists:\n  constructor() {\n    this.token = null;\n    this.user = null;\n    this.token = localStorage.getItem(\"token\");\n    if (this.token) {\n      const userContainer = jwtDecode(this.token);\n      this.user = userContainer.user;\n    }\n  }\n}\n\n// 2. Action Type\nexport let AuthActionType;\n\n// 3. Action\n(function (AuthActionType) {\n  AuthActionType[\"Register\"] = \"Register\";\n  AuthActionType[\"Login\"] = \"Login\";\n  AuthActionType[\"Logout\"] = \"Logout\";\n})(AuthActionType || (AuthActionType = {}));\n// 4. Reducer\nexport function authReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case AuthActionType.Register: // Here the payload is the token (string)\n    case AuthActionType.Login:\n      newState.token = action.payload;\n      const userContainer = jwtDecode(newState.token);\n      newState.user = userContainer.user;\n      localStorage.setItem(\"token\", newState.token); // Save token to storage for persisting token after refresh\n      break;\n    case AuthActionType.Logout:\n      newState.token = null;\n      newState.user = null;\n      localStorage.removeItem(\"token\"); // Remove token when logged out\n      break;\n  }\n  return newState;\n}\n\n// 5. Store\nexport const authStore = createStore(authReducer);","map":{"version":3,"names":["jwtDecode","createStore","AuthState","constructor","token","user","localStorage","getItem","userContainer","AuthActionType","authReducer","currentState","action","newState","type","Register","Login","payload","setItem","Logout","removeItem","authStore"],"sources":["C:/Users/User/Desktop/javascript/tirgulhomeday9/Frontend/src/Redux/AuthRedux.ts"],"sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport { createStore } from \"redux\";\r\nimport UserModel from \"../Models/user-model\";\r\n\r\n// 1. Global State\r\nexport class AuthState {\r\n\r\n    public token: string = null;\r\n    public user: UserModel = null;\r\n\r\n    // Load back the token from storage if exists:\r\n    public constructor() {\r\n        this.token = localStorage.getItem(\"token\");\r\n        if(this.token) {\r\n            const userContainer = jwtDecode<{ user: UserModel }>(this.token);\r\n            this.user = userContainer.user;\r\n        }\r\n    }\r\n}\r\n\r\n// 2. Action Type\r\nexport enum AuthActionType {\r\n    Register = \"Register\",\r\n    Login = \"Login\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\n// 3. Action\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: string; // the string is because we're getting a token, the ? is because logout sends nothing.\r\n}\r\n\r\n// 4. Reducer\r\nexport function authReducer(currentState = new AuthState(), action: AuthAction): AuthState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n\r\n        case AuthActionType.Register: // Here the payload is the token (string)\r\n        case AuthActionType.Login:\r\n            newState.token = action.payload;\r\n            const userContainer = jwtDecode<{ user: UserModel }>(newState.token);\r\n            newState.user = userContainer.user;\r\n            localStorage.setItem(\"token\", newState.token); // Save token to storage for persisting token after refresh\r\n            break;\r\n\r\n        case AuthActionType.Logout:\r\n            newState.token = null;\r\n            newState.user = null;\r\n            localStorage.removeItem(\"token\"); // Remove token when logged out\r\n            break;\r\n\r\n    }\r\n\r\n    return newState;\r\n}\r\n\r\n// 5. Store\r\nexport const authStore = createStore(authReducer);"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,SAASC,WAAW,QAAQ,OAAO;AAGnC;AACA,OAAO,MAAMC,SAAS,CAAC;EAKnB;EACOC,WAAW,GAAG;IAAA,KAJdC,KAAK,GAAW,IAAI;IAAA,KACpBC,IAAI,GAAc,IAAI;IAIzB,IAAI,CAACD,KAAK,GAAGE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC1C,IAAG,IAAI,CAACH,KAAK,EAAE;MACX,MAAMI,aAAa,GAAGR,SAAS,CAAsB,IAAI,CAACI,KAAK,CAAC;MAChE,IAAI,CAACC,IAAI,GAAGG,aAAa,CAACH,IAAI;IAClC;EACJ;AACJ;;AAEA;AACA,WAAYI,cAAc;;AAM1B;AAAA,WANYA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;AAAA,GAAdA,cAAc,KAAdA,cAAc;AAY1B;AACA,OAAO,SAASC,WAAW,GAAgE;EAAA,IAA/DC,YAAY,uEAAG,IAAIT,SAAS,EAAE;EAAA,IAAEU,MAAkB;EAE1E,MAAMC,QAAQ,GAAG;IAAE,GAAGF;EAAa,CAAC;EAEpC,QAAQC,MAAM,CAACE,IAAI;IAEf,KAAKL,cAAc,CAACM,QAAQ,CAAC,CAAC;IAC9B,KAAKN,cAAc,CAACO,KAAK;MACrBH,QAAQ,CAACT,KAAK,GAAGQ,MAAM,CAACK,OAAO;MAC/B,MAAMT,aAAa,GAAGR,SAAS,CAAsBa,QAAQ,CAACT,KAAK,CAAC;MACpES,QAAQ,CAACR,IAAI,GAAGG,aAAa,CAACH,IAAI;MAClCC,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACT,KAAK,CAAC,CAAC,CAAC;MAC/C;IAEJ,KAAKK,cAAc,CAACU,MAAM;MACtBN,QAAQ,CAACT,KAAK,GAAG,IAAI;MACrBS,QAAQ,CAACR,IAAI,GAAG,IAAI;MACpBC,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;MAClC;EAAM;EAId,OAAOP,QAAQ;AACnB;;AAEA;AACA,OAAO,MAAMQ,SAAS,GAAGpB,WAAW,CAACS,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}