{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nimport { AuthActionType, authStore } from \"../Redux/AuthRedux\";\nclass AuthService {\n  async register(user) {\n    const response = await axios.post(appConfig.registerUrl, user);\n    const token = response.data;\n    authStore.dispatch({\n      type: AuthActionType.Register,\n      payload: token\n    });\n  }\n  async login(credentials) {\n    const response = await axios.post(appConfig.loginUrl, credentials);\n    const token = response.data;\n\n    // Send token to global state:\n    authStore.dispatch({\n      type: AuthActionType.Login,\n      payload: token\n    });\n  }\n\n  // Logout:\n  logout() {\n    authStore.dispatch({\n      type: AuthActionType.Logout\n    });\n  }\n\n  // Is user logged in:\n  isLoggedIn() {\n    return authStore.getState().token !== null;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","appConfig","AuthActionType","authStore","AuthService","register","user","response","post","registerUrl","token","data","dispatch","type","Register","payload","login","credentials","loginUrl","Login","logout","Logout","isLoggedIn","getState","authService"],"sources":["C:/Users/User/Desktop/javascript/movies project 6/Frontend/src/Services/auth-service.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport UserModel from \"../Models/user-model\";\r\nimport CredentialsModel from \"../Models/credential-model\";\r\nimport { AuthActionType, authStore } from \"../Redux/AuthRedux\";\r\n\r\nclass AuthService {\r\n\r\n     async register(user: UserModel): Promise<void> {\r\n        const response = await axios.post<string>(appConfig.registerUrl, user);\r\n        const token = response.data;\r\n        authStore.dispatch({ type: AuthActionType.Register, payload: token });\r\n    }\r\n\r\n     async login(credentials: CredentialsModel): Promise<void> {\r\n\r\n        const response = await axios.post<string>(appConfig.loginUrl, credentials);\r\n\r\n        const token = response.data;\r\n\r\n        // Send token to global state:\r\n        authStore.dispatch({ type: AuthActionType.Login, payload: token });\r\n    }\r\n\r\n    // Logout:\r\n    public logout(): void {\r\n        authStore.dispatch({ type: AuthActionType.Logout });\r\n    }\r\n\r\n    // Is user logged in:\r\n    public isLoggedIn(): boolean {\r\n        return authStore.getState().token !== null;\r\n    }\r\n\r\n}\r\n\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,oBAAoB;AAG1C,SAASC,cAAc,EAAEC,SAAS,QAAQ,oBAAoB;AAE9D,MAAMC,WAAW,CAAC;EAEb,MAAMC,QAAQA,CAACC,IAAe,EAAiB;IAC5C,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAASP,SAAS,CAACQ,WAAW,EAAEH,IAAI,CAAC;IACtE,MAAMI,KAAK,GAAGH,QAAQ,CAACI,IAAI;IAC3BR,SAAS,CAACS,QAAQ,CAAC;MAAEC,IAAI,EAAEX,cAAc,CAACY,QAAQ;MAAEC,OAAO,EAAEL;IAAM,CAAC,CAAC;EACzE;EAEC,MAAMM,KAAKA,CAACC,WAA6B,EAAiB;IAEvD,MAAMV,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAASP,SAAS,CAACiB,QAAQ,EAAED,WAAW,CAAC;IAE1E,MAAMP,KAAK,GAAGH,QAAQ,CAACI,IAAI;;IAE3B;IACAR,SAAS,CAACS,QAAQ,CAAC;MAAEC,IAAI,EAAEX,cAAc,CAACiB,KAAK;MAAEJ,OAAO,EAAEL;IAAM,CAAC,CAAC;EACtE;;EAEA;EACOU,MAAMA,CAAA,EAAS;IAClBjB,SAAS,CAACS,QAAQ,CAAC;MAAEC,IAAI,EAAEX,cAAc,CAACmB;IAAO,CAAC,CAAC;EACvD;;EAEA;EACOC,UAAUA,CAAA,EAAY;IACzB,OAAOnB,SAAS,CAACoB,QAAQ,CAAC,CAAC,CAACb,KAAK,KAAK,IAAI;EAC9C;AAEJ;AAEA,MAAMc,WAAW,GAAG,IAAIpB,WAAW,CAAC,CAAC;AAErC,eAAeoB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}