{"ast":null,"code":"// import { createStore } from \"redux\";\n// import BuyModel from \"../Models/buy-model\";\n\n// export class BuyState {\n//     public buy: BuyModel[] = [];\n// }\n\n// export enum BuyActionType {\n//     getAllBuys = \"getAllBuys\",\n//     buy = \"buy\",\n//     unBuy = \"unBuy\",\n//     AddBuy = \"AddBuy\",\n//     RemoveBuy = \"RemoveBuy\",\n// }\n\n// export interface BuyAction {\n//     type: BuyActionType;\n//     payload: any;\n// }\n\n// export function buyReducer(currentState = new BuyState(), action: BuyAction): BuyState {\n//     const newState = { ...currentState }\n\n//     switch (action.type) {\n//         case BuyActionType.getAllBuys:\n//             newState.buy = action.payload\n//             break;\n//         case BuyActionType.buy:\n//             const isNotFollowingToUpdate = newState.buy.find(b => b.buyCount === action.payload)\n//             // isNotFollowingToUpdate.idBuying = 1;\n//             // isNotFollowingToUpdate.buyCount += 1\n\n//             let buyCount = isNotFollowingToUpdate.buyCount++;\n//             // let priceCount1 = props.buy.price;\n//             if(isNotFollowingToUpdate.buyCount > 1){\n//                 let priceCount1 = isNotFollowingToUpdate.price += isNotFollowingToUpdate.priceCount;\n//                 // console.log(priceCount1)\n//             }\n//             break;\n\n//         case BuyActionType.unBuy:\n//             const isFollowingToUpdate = newState.buy.find(b => b.buyId === action.payload)\n//             if (isFollowingToUpdate.idBuying === 1) {\n//                 isFollowingToUpdate.idBuying = 0;\n//             }\n//             break;\n\n//         case BuyActionType.RemoveBuy:\n//             const removeFollowerVacation = newState.buy.find(b => b.buyId === action.payload)\n//             removeFollowerVacation.buyCount -= 1;\n//             break;\n//     }\n//     return newState\n// }\n\n// export const buyStore = createStore(buyReducer);","map":{"version":3,"names":[],"sources":["C:/Users/User/Desktop/javascript/movies project 6/Frontend/src/Redux/BuyModel.ts"],"sourcesContent":["// import { createStore } from \"redux\";\r\n// import BuyModel from \"../Models/buy-model\";\r\n\r\n// export class BuyState {\r\n//     public buy: BuyModel[] = [];\r\n// }\r\n\r\n// export enum BuyActionType {\r\n//     getAllBuys = \"getAllBuys\",\r\n//     buy = \"buy\",\r\n//     unBuy = \"unBuy\",\r\n//     AddBuy = \"AddBuy\",\r\n//     RemoveBuy = \"RemoveBuy\",\r\n// }\r\n\r\n// export interface BuyAction {\r\n//     type: BuyActionType;\r\n//     payload: any;\r\n// }\r\n\r\n// export function buyReducer(currentState = new BuyState(), action: BuyAction): BuyState {\r\n//     const newState = { ...currentState }\r\n\r\n//     switch (action.type) {\r\n//         case BuyActionType.getAllBuys:\r\n//             newState.buy = action.payload\r\n//             break;\r\n//         case BuyActionType.buy:\r\n//             const isNotFollowingToUpdate = newState.buy.find(b => b.buyCount === action.payload)\r\n//             // isNotFollowingToUpdate.idBuying = 1;\r\n//             // isNotFollowingToUpdate.buyCount += 1\r\n\r\n\r\n//             let buyCount = isNotFollowingToUpdate.buyCount++;\r\n//             // let priceCount1 = props.buy.price;\r\n//             if(isNotFollowingToUpdate.buyCount > 1){\r\n//                 let priceCount1 = isNotFollowingToUpdate.price += isNotFollowingToUpdate.priceCount;\r\n//                 // console.log(priceCount1)\r\n//             }\r\n//             break;\r\n\r\n//         case BuyActionType.unBuy:\r\n//             const isFollowingToUpdate = newState.buy.find(b => b.buyId === action.payload)\r\n//             if (isFollowingToUpdate.idBuying === 1) {\r\n//                 isFollowingToUpdate.idBuying = 0;\r\n//             }\r\n//             break;\r\n\r\n//         case BuyActionType.RemoveBuy:\r\n//             const removeFollowerVacation = newState.buy.find(b => b.buyId === action.payload)\r\n//             removeFollowerVacation.buyCount -= 1;\r\n//             break;\r\n//     }\r\n//     return newState\r\n// }\r\n\r\n// export const buyStore = createStore(buyReducer);"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}