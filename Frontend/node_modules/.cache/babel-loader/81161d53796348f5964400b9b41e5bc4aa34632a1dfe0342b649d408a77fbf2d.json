{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nimport { MovieActionType, movieStore } from \"../Redux/MovieRedux\";\nimport { TheaterActionType, theaterStore } from \"../Redux/TheaterModel\";\nimport { GenreActionType, genreStore } from \"../Redux/genreModel\";\nclass MoviesService {\n  async getAllTheaters() {\n    let theater = theaterStore.getState().theater;\n    if (theater.length === 0) {\n      const response = await axios.get(appConfig.theatersUrl);\n      theater = response.data;\n      console.log(theater);\n      theaterStore.dispatch({\n        type: TheaterActionType.getAllTheaters,\n        payload: theater\n      });\n    }\n    return theater;\n  }\n  async getOneMovie(id) {\n    let movies = movieStore.getState().movie;\n    let movie = movies.find(m => m.movieId === mov);\n    if (!vacation) {\n      const response = await axios.get(appConfig.vacationsAdminUrl + vacationId);\n      vacation = response.data;\n    }\n    return vacation;\n  }\n  async getAllGenres() {\n    let genre = genreStore.getState().genre;\n    if (genre.length === 0) {\n      const response = await axios.get(appConfig.genresUrl);\n      genre = response.data;\n      console.log(genre);\n      genreStore.dispatch({\n        type: GenreActionType.getAllGenres,\n        payload: genre\n      });\n    }\n    return genre;\n  }\n  async getAllMovies() {\n    // let movie = movieStore.getState().movie\n\n    const response = await axios.get(appConfig.moviesUrl);\n    const movie = response.data;\n    console.log(movie);\n    // movieStore.dispatch({ type: MovieActionType.getAllMovies, payload: movie })\n    return movie;\n  }\n  async getMovieByTheater(theaterId) {\n    let theaters = movieStore.getState().movie;\n    let theater = theaters.find(t => t.theaterId === theaterId);\n    if (!theater) {\n      const response = await axios.get(appConfig.moviesByTheaterUrl + theaterId);\n      theaters = response.data;\n      console.log(theaters);\n    }\n    return theaters;\n  }\n  async getMovieByGenre(genreId) {\n    let genres = movieStore.getState().movie;\n    let genre = genres.find(g => g.genreId === genreId);\n    if (!genre) {\n      const response = await axios.get(appConfig.moviesByGenreUrl + genreId);\n      genres = response.data;\n      console.log(genres);\n    }\n    return genres;\n  }\n  async addMovie(movie) {\n    // const headers = { \"Content-Type\": \"multipart/form-data\" };\n    const response = await axios.post(appConfig.moviesUrl, movie);\n    const newMovie = response.data;\n    console.log(newMovie);\n    movieStore.dispatch({\n      type: MovieActionType.addMovie,\n      payload: newMovie\n    });\n  }\n  async deleteMovie(movieId) {\n    await axios.delete(appConfig.moviesLikesUrl + movieId);\n    movieStore.dispatch({\n      type: MovieActionType.deleteMovie,\n      payload: movieId\n    });\n  }\n  async addLike(movieId) {\n    const response = await axios.post(appConfig.moviesLikesUrl + movieId);\n    const addedLike = response.data;\n    console.log(addedLike);\n    movieStore.dispatch({\n      type: MovieActionType.Like,\n      payload: movieId\n    });\n    movieStore.dispatch({\n      type: MovieActionType.addLike,\n      payload: movieId\n    });\n  }\n}\nconst moviesService = new MoviesService();\nexport default moviesService;","map":{"version":3,"names":["axios","appConfig","MovieActionType","movieStore","TheaterActionType","theaterStore","GenreActionType","genreStore","MoviesService","getAllTheaters","theater","getState","length","response","get","theatersUrl","data","console","log","dispatch","type","payload","getOneMovie","id","movies","movie","find","m","movieId","mov","vacation","vacationsAdminUrl","vacationId","getAllGenres","genre","genresUrl","getAllMovies","moviesUrl","getMovieByTheater","theaterId","theaters","t","moviesByTheaterUrl","getMovieByGenre","genreId","genres","g","moviesByGenreUrl","addMovie","post","newMovie","deleteMovie","delete","moviesLikesUrl","addLike","addedLike","Like","moviesService"],"sources":["C:/Users/User/Desktop/javascript/tirgulhomeday9/Frontend/src/Services/movies-service.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport TheatersModel from \"../Models/theatersId-model\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport MoviesModel from \"../Models/movies-model\";\r\nimport { MovieActionType, movieStore } from \"../Redux/MovieRedux\";\r\nimport { TheaterActionType, theaterStore } from \"../Redux/TheaterModel\";\r\nimport { GenreActionType, genreStore } from \"../Redux/genreModel\";\r\nimport GenreModel from \"../Models/genre-model\";\r\n\r\nclass MoviesService{\r\n\r\n    public async getAllTheaters():Promise<TheatersModel[]>{\r\n        let theater = theaterStore.getState().theater\r\n        if(theater.length === 0){\r\n            const response = await axios.get<TheatersModel[]>(appConfig.theatersUrl)\r\n            theater = response.data;\r\n            console.log(theater)\r\n            theaterStore.dispatch({ type: TheaterActionType.getAllTheaters, payload: theater })\r\n        }\r\n        return theater\r\n    }\r\n\r\n    public async getOneMovie(id:number):Promise<MoviesModel>{\r\n        let movies = movieStore.getState().movie;\r\n        let movie = movies.find(m => m.movieId === mov )  \r\n        if(!vacation){\r\n            const response = await axios.get<VacationModel>(appConfig.vacationsAdminUrl + vacationId)\r\n            vacation = response.data;\r\n        }\r\n        return vacation;\r\n    \r\n    }\r\n\r\n    public async getAllGenres():Promise<GenreModel[]>{\r\n        let genre = genreStore.getState().genre\r\n        if(genre.length === 0){\r\n            const response = await axios.get<GenreModel[]>(appConfig.genresUrl)\r\n            genre = response.data;\r\n            console.log(genre)\r\n            genreStore.dispatch({ type: GenreActionType.getAllGenres, payload: genre })\r\n        }\r\n        return genre\r\n    }\r\n\r\n    public async getAllMovies():Promise<MoviesModel[]>{\r\n        // let movie = movieStore.getState().movie\r\n    \r\n            const response = await axios.get<MoviesModel[]>(appConfig.moviesUrl)\r\n            const movie = response.data;\r\n            console.log(movie)\r\n            // movieStore.dispatch({ type: MovieActionType.getAllMovies, payload: movie })\r\n            return movie\r\n        \r\n    }\r\n\r\n    public async getMovieByTheater(theaterId:number):Promise<MoviesModel[]>{\r\n        let theaters = movieStore.getState().movie\r\n        let theater = theaters.find(t => t.theaterId === theaterId)  \r\n        if(!theater){\r\n            const response = await axios.get<MoviesModel[]>(appConfig.moviesByTheaterUrl + theaterId);\r\n            theaters = response.data;\r\n            console.log(theaters)\r\n        }\r\n        return theaters;\r\n    }\r\n\r\n    public async getMovieByGenre(genreId:number):Promise<MoviesModel[]>{\r\n        let genres = movieStore.getState().movie\r\n        let genre = genres.find(g => g.genreId === genreId)  \r\n        if(!genre){\r\n            const response = await axios.get<MoviesModel[]>(appConfig.moviesByGenreUrl + genreId);\r\n            genres = response.data;\r\n            console.log(genres)\r\n        }\r\n        return genres;\r\n    }\r\n\r\n    public async addMovie(movie:MoviesModel):Promise<void>{\r\n        // const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n        const response = await axios.post<MoviesModel>(appConfig.moviesUrl, movie);\r\n        const newMovie = response.data;\r\n        console.log(newMovie)\r\n        movieStore.dispatch({type:MovieActionType.addMovie, payload: newMovie})\r\n    }\r\n\r\n    public async deleteMovie(movieId:number):Promise<void>{\r\n        await axios.delete<MoviesModel>(appConfig.moviesLikesUrl + movieId)\r\n        movieStore.dispatch({type:MovieActionType.deleteMovie, payload: movieId})\r\n    }\r\n\r\n    public async addLike(movieId:number):Promise<void>{\r\n        const response = await axios.post(appConfig.moviesLikesUrl + movieId)\r\n        const addedLike = response.data;\r\n        console.log(addedLike)\r\n        movieStore.dispatch({type:MovieActionType.Like, payload: movieId})\r\n        movieStore.dispatch({type:MovieActionType.addLike, payload: movieId})\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nconst moviesService = new MoviesService();\r\nexport default moviesService;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}