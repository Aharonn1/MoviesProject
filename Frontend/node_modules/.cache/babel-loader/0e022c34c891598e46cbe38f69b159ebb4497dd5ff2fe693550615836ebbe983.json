{"ast":null,"code":"import { createStore } from \"redux\";\nexport class BuyState {\n  constructor() {\n    this.buy = [];\n  }\n}\nexport let BuyActionType = /*#__PURE__*/function (BuyActionType) {\n  BuyActionType[\"getAllBuys\"] = \"getAllBuys\";\n  BuyActionType[\"buy\"] = \"buy\";\n  BuyActionType[\"unBuy\"] = \"unBuy\";\n  BuyActionType[\"AddBuy\"] = \"AddBuy\";\n  BuyActionType[\"RemoveBuy\"] = \"RemoveBuy\";\n  return BuyActionType;\n}({});\nexport function buyReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BuyState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case BuyActionType.getAllBuys:\n      newState.buy = action.payload;\n      break;\n    case BuyActionType.buy:\n      const isNotFollowingToUpdate = newState.buy.find(b => b.buyCount === action.payload);\n      isNotFollowingToUpdate.idBuying = 1;\n      isNotFollowingToUpdate.buyCount += 1;\n      let buyCount = isNotFollowingToUpdate.buyCount++;\n      // let priceCount1 = props.buy.price;\n      if (isNotFollowingToUpdate.buyCount > 1) {\n        let priceCount1 = isNotFollowingToUpdate.price += isNotFollowingToUpdate.priceCount;\n        console.log(priceCount1);\n      }\n      break;\n    case BuyActionType.unBuy:\n      const isFollowingToUpdate = newState.buy.find(b => b.buyId === action.payload);\n      if (isFollowingToUpdate.idBuying === 1) {\n        isFollowingToUpdate.idBuying = 0;\n      }\n      break;\n    case BuyActionType.RemoveBuy:\n      const removeFollowerVacation = newState.buy.find(b => b.buyId === action.payload);\n      removeFollowerVacation.buyCount -= 1;\n      break;\n  }\n  return newState;\n}\nexport const buyStore = createStore(buyReducer);","map":{"version":3,"names":["createStore","BuyState","constructor","buy","BuyActionType","buyReducer","currentState","arguments","length","undefined","action","newState","type","getAllBuys","payload","isNotFollowingToUpdate","find","b","buyCount","idBuying","priceCount1","price","priceCount","console","log","unBuy","isFollowingToUpdate","buyId","RemoveBuy","removeFollowerVacation","buyStore"],"sources":["C:/Users/User/Desktop/javascript/movies project 5/Frontend/src/Redux/BuyModel.ts"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport MoviesModel from \"../Models/movies-model\";\r\nimport TheatersModel from \"../Models/theatersId-model\";\r\nimport GenreModel from \"../Models/genre-model\";\r\nimport BuyModel from \"../Models/buy-model\";\r\n\r\nexport class BuyState {\r\n    public buy: BuyModel[] = [];\r\n}\r\n\r\nexport enum BuyActionType {\r\n    getAllBuys = \"getAllBuys\",\r\n    buy = \"buy\",\r\n    unBuy = \"unBuy\",\r\n    AddBuy = \"AddBuy\",\r\n    RemoveBuy = \"RemoveBuy\",\r\n}\r\n\r\nexport interface BuyAction {\r\n    type: BuyActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function buyReducer(currentState = new BuyState(), action: BuyAction): BuyState {\r\n    const newState = { ...currentState }\r\n\r\n    switch (action.type) {\r\n        case BuyActionType.getAllBuys:\r\n            newState.buy = action.payload\r\n            break;\r\n        case BuyActionType.buy:\r\n            const isNotFollowingToUpdate = newState.buy.find(b => b.buyCount === action.payload)\r\n            isNotFollowingToUpdate.idBuying = 1;\r\n            isNotFollowingToUpdate.buyCount += 1\r\n\r\n\r\n            let buyCount = isNotFollowingToUpdate.buyCount++;\r\n            // let priceCount1 = props.buy.price;\r\n            if(isNotFollowingToUpdate.buyCount > 1){\r\n                let priceCount1 = isNotFollowingToUpdate.price += isNotFollowingToUpdate.priceCount;\r\n                console.log(priceCount1)\r\n            }\r\n            break;\r\n\r\n        case BuyActionType.unBuy:\r\n            const isFollowingToUpdate = newState.buy.find(b => b.buyId === action.payload)\r\n            if (isFollowingToUpdate.idBuying === 1) {\r\n                isFollowingToUpdate.idBuying = 0;\r\n            }\r\n            break;\r\n\r\n        case BuyActionType.RemoveBuy:\r\n            const removeFollowerVacation = newState.buy.find(b => b.buyId === action.payload)\r\n            removeFollowerVacation.buyCount -= 1;\r\n            break;\r\n    }\r\n    return newState\r\n}\r\n\r\nexport const buyStore = createStore(buyReducer);"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAMnC,OAAO,MAAMC,QAAQ,CAAC;EAAAC,YAAA;IAAA,KACXC,GAAG,GAAe,EAAE;EAAA;AAC/B;AAEA,WAAYC,aAAa,0BAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAazB,OAAO,SAASC,UAAUA,CAAA,EAA6D;EAAA,IAA5DC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIN,QAAQ,CAAC,CAAC;EAAA,IAAES,MAAiB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACvE,MAAME,QAAQ,GAAG;IAAE,GAAGL;EAAa,CAAC;EAEpC,QAAQI,MAAM,CAACE,IAAI;IACf,KAAKR,aAAa,CAACS,UAAU;MACzBF,QAAQ,CAACR,GAAG,GAAGO,MAAM,CAACI,OAAO;MAC7B;IACJ,KAAKV,aAAa,CAACD,GAAG;MAClB,MAAMY,sBAAsB,GAAGJ,QAAQ,CAACR,GAAG,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKR,MAAM,CAACI,OAAO,CAAC;MACpFC,sBAAsB,CAACI,QAAQ,GAAG,CAAC;MACnCJ,sBAAsB,CAACG,QAAQ,IAAI,CAAC;MAGpC,IAAIA,QAAQ,GAAGH,sBAAsB,CAACG,QAAQ,EAAE;MAChD;MACA,IAAGH,sBAAsB,CAACG,QAAQ,GAAG,CAAC,EAAC;QACnC,IAAIE,WAAW,GAAGL,sBAAsB,CAACM,KAAK,IAAIN,sBAAsB,CAACO,UAAU;QACnFC,OAAO,CAACC,GAAG,CAACJ,WAAW,CAAC;MAC5B;MACA;IAEJ,KAAKhB,aAAa,CAACqB,KAAK;MACpB,MAAMC,mBAAmB,GAAGf,QAAQ,CAACR,GAAG,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACU,KAAK,KAAKjB,MAAM,CAACI,OAAO,CAAC;MAC9E,IAAIY,mBAAmB,CAACP,QAAQ,KAAK,CAAC,EAAE;QACpCO,mBAAmB,CAACP,QAAQ,GAAG,CAAC;MACpC;MACA;IAEJ,KAAKf,aAAa,CAACwB,SAAS;MACxB,MAAMC,sBAAsB,GAAGlB,QAAQ,CAACR,GAAG,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACU,KAAK,KAAKjB,MAAM,CAACI,OAAO,CAAC;MACjFe,sBAAsB,CAACX,QAAQ,IAAI,CAAC;MACpC;EACR;EACA,OAAOP,QAAQ;AACnB;AAEA,OAAO,MAAMmB,QAAQ,GAAG9B,WAAW,CAACK,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}